'''
二分
'''

'''
什么是二分搜索？
首先二分是一种非常常见又使用的算法。它指的是在搜索空间中，只会有2种状态，一种是满足，一种是不满足，一般我们都是去搜索满足的值。
要求搜索空间是线性的，是一维的。 其搜索空间满足这样的分布：
第一种：
满足 满足 满足 满足 满足 满足 不满足 不满足 不满足

第二种
不满足 不满足 不满足 满足 满足 满足 满足 满足 满足
'''


'''
二分就是去找处于中间位置，也就是靠中间的那的满足和不满足。

我们可能想到二分就是去在一个有序数组中找某个数是否存在。
但其实原理是一样的，我们看下面的例子
有序数组为：
1 2 3 5 8 9 9 10 30 78 560
我们要找的数是9.
那么我们就可以转变为：找到最后一个满足小于等于9的数字，我们把这个数找出来，然后再看它是不是9就可以了
上面的数组状态就是这样的
满足 满足 满足 满足 满足 满足 满足 不满足 不满足 不满足 不满足

二分的写法有好几种，我们只学其中一种：
1.确定二分的左右边界，初始化答案为-1
循环(左边界小于等于右边界){
a) 通过左右边界求出中间位置
b) 看中间位置是否能得到满足
	 满足： 更新答案，并将边界调整: 去找更好的答案
     不满足：将边界调整：去找能产生答案的位置
}
如果答案还是初始化的答案，为-1，就肯定没有答案
再检查答案是否是自己需要的

以上面需求为例：
A = [1,2,3,5,8,9,9,10,30,78,560]
l,r,ans = 0,len(A),-1
while l<=r:
    mid = (l + r)//2
    if A[mid] <= 9:
        ans = mid
        l = mid + 1
    else:
        r = mid - 1
if ans == -1 or A[ans] != 9:
    print("no existed")
else:
    print("pos = ",ans)

'''