''''''

'''
什么是递归？
很多人的解释就是自己调用自己，但其实这是一种不太准确的说话，并且很难理解，也很难写出代码。
下面依次给出递归的更好理解

为什么要用递归？
假如有一个问题，要解决这个问题，我们可以先去解决他的子问题，而他的子问题和原问题类似。对于这种原问题需要先解决子问题的，就比较适合递归。

现在给一个例子来理解：
有一个人想要爬楼梯，他每一次走有2种走法：（1）跨1个台阶 (2) 跨2个台阶
现在他处于楼梯底端，楼梯一共有n个台阶，问他走到第n个台阶一共有多少种走法？

递归思路：
1. 我们要求走到第n个台阶的方案数，我们就需要知道这个方案数是怎么来的，要考虑到他的来源。
2. 我们可以简单的知道，到达第n个台阶前，这个人要么站在第n-2个台阶，要么站在第n-1个台阶。
3. 那么我们可以知道走到第n个台阶的方案数，就是走到第n-2台阶的方案数 + 走到第n-1台阶的方案数
4. 所以我们就把关于n的原问题，变成了关于n - 2 和 n - 1的问题。

特点：
1. 可以发现，我们通过递归，可以把问题规模逐渐变小
2. 当问题规模特别小的时候，小到我们自己都说得出答案，就不用再去递归分解问题了。比如说走到第1个台阶的方案数等于1，
	走到第2个台阶的方案数等于2

列出递归函数：
f(n)表示：走到第n个台阶的方案数
f(1) = 1
f(2) = 2
f(n) = f(n-1) + f(n-2)
通过上面式子，我们就可以写出递归函数的代码了

如何理解代码：
以下面的代码，来理解递归函数的调用关系。(讲课的时候，用画板演示)
其实很简单：
递归函数都是有参数的，我们在递归的时候，可以发现参数变化了。只要参数变化了，就不是本身了，
另外我们需要了解递归的结构：
递归一定是一颗树形结构，也就是递归树。
'''